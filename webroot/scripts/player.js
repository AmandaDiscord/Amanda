let channelID=_channelID,serverTimeDiff=_serverTimeDiff;import{Player as t,Queue as e,VoiceInfo as s,SideControls as i}from"./classes.js";import{q as a,opcodes as r,generateNonce as n}from"./utilities.js";import{ListenManager as h}from"./wrappers/ListenManager.js";class Session{constructor(n){this.ws=n,this.state=null,this.player=new t(a("#player-container"),this),this.queue=new e(a("#queue-container"),this),this.voiceInfo=new s(a("#voice-info")),this.sideControls=new i(a("#side-controls"),this),this.listenManager=new h;let l=new Map([[r.ACKNOWLEDGE,"acknowledge"],[r.STATE,"updateState"],[r.TRACK_ADD,"trackAdd"],[r.NEXT,"next"],[r.TRACK_UPDATE,"trackUpdate"],[r.TIME_UPDATE,"timeUpdate"],[r.TRACK_REMOVE,"trackRemove"],[r.LISTENERS_UPDATE,"listenersUpdate"],[r.ATTRIBUTES_CHANGE,"attributesChange"],[r.CLEAR_QUEUE,"clearQueue"]]);this.ws.addEventListener("open",()=>this.onOpen()),this.ws.addEventListener("close",t=>this.onClose(t)),this.ws.addEventListener("error",console.error),this.ws.addEventListener("message",t=>{console.log("%c[WS ←]","color: blue",t.data);let e=JSON.parse(t.data),s=l.get(e.op);s&&this[s](e)})}send(t){t.nonce||(t.nonce=n());let e=JSON.stringify(t);console.log("%c[WS →]","color: #c00000",e),this.ws.send(e)}onOpen(){this.send({op:r.IDENTIFY,d:{cookie:document.cookie,channel_id:channelID,timestamp:Date.now()}})}onClose(t){console.log("WebSocket closed.",t)}acknowledge(t){t.d&&(serverTimeDiff=t.d.serverTimeDiff,console.log("Time difference: "+serverTimeDiff),this.sideControls.mainLoaded=!0,this.sideControls.render())}updateState(t){let e=this.state;this.state=t.d||null,null===this.state?(a("#voice-channel-name").textContent="Nothing playing",this.player.setTrack(null),this.player.updateAttributes({}),this.resetTime(),this.queue.replaceItems([]),this.listenManager.stop()):(a("#voice-channel-name").textContent=this.state.voiceChannel.name,this.player.setTrack(this.state.tracks[0]),this.player.updateAttributes(this.state.attributes),this.queue.replaceItems(this.state.tracks.slice(1)),this.queue.isFirstAdd=!1,this.updatePlayerTime(),null===e&&this.state.tracks[0]&&this.listenManager.next(this.state.tracks[0])),this.sideControls.render(),this.listenersUpdate(t)}listenersUpdate(t){t&&this.state?(this.state.members=t.d.members,this.voiceInfo.setMembers(this.state.members)):this.voiceInfo.setMembers([])}trackAdd(t){this.state&&(this.state.tracks.splice(t.d.position,0,t.d.track),1==this.state.tracks.length?(this.player.setTrack(t.d.track),this.updatePlayerTime(),this.listenManager.next(t.d.track)):this.queue.addItem(t.d.track,t.d.position))}trackRemove(t){if(!this.state)return;let e=t.d.index;this.queue.removeIndex(e-1),this.state.tracks.splice(e,1)}clearQueue(){this.state&&(this.queue.removeAllTracks(),this.state.tracks.splice(1))}next(){this.state&&(this.state.tracks.shift(),this.queue.shift(),this.resetTime(),this.player.setTrack(this.state.tracks[0]||null),this.listenManager.next(this.state.tracks[0]))}trackUpdate(t){if(!this.state)return;let e=t.d.track,s=t.d.index;Object.assign(this.state.tracks[s],e),0==s?this.player.updateData(t):this.queue.children[s-1].updateData(e)}timeUpdate(t){this.state&&(t.d.playing&&!this.state.playing?this.listenManager.resume():!t.d.playing&&this.state.playing&&this.listenManager.pause(),Object.assign(this.state,t.d),this.updatePlayerTime())}resetTime(){this.state&&(Object.assign(this.state,{trackStartTime:0,maxTime:0,playing:!1}),this.updatePlayerTime())}updatePlayerTime(){this.state&&this.player.updateTime({playing:this.state.playing,trackStartTime:this.state.trackStartTime,pausedAt:this.state.pausedAt,maxTime:this.state.tracks&&this.state.tracks[0]?this.state.tracks[0].length:0,live:!!this.state.tracks&&!!this.state.tracks[0]&&this.state.tracks[0].live})}togglePlayback(){this.send({op:r.TOGGLE_PLAYBACK})}skip(){this.send({op:r.SKIP})}stop(){this.send({op:r.STOP})}attributesChange(t){this.state&&(Object.assign(this.state.attributes,t.d),this.player.updateAttributes(this.state.attributes))}requestAttributesChange(t){this.send({op:r.ATTRIBUTES_CHANGE,d:t})}}let ws=function(){let t=window.location.origin.replace("http","ws");return new WebSocket(t)}();window.session=new Session(ws);export{Session};
