import{q as e}from"../utilities.js";function createEmbedURL(e,s){let t=new URL("https://w.soundcloud.com/player/");return t.searchParams.append("url",e),Object.entries(s).forEach(([e,s])=>{t.searchParams.append(e,String(s))}),t.toString()}class SoundCloudWrapper{constructor(){this.frame=e("#f-soundcloud"),this.controller=null,this.ready=!1,this.seekers=new Set}waitForReady(){return this.ready?Promise.resolve():new Promise(e=>{console.log("cswait: ready is "+this.ready),this.controller.bind(SC.Widget.Events.READY,e)}).then(()=>{this.ready=!0,console.log("cswait: resolved")})}async load(e){this.seekers.clear(),console.log("scload: reloading controller");let s=`https://api.soundcloud.com/tracks/${e.trackNumber}`,t={auto_play:!1,show_artwork:!1,visual:!1,callback:!0};if(this.controller)this.controller.unbind(SC.Widget.Events.READY),this.controller.unbind(SC.Widget.Events.PLAY_PROGRESS),this.controller.load(s,t);else{if(!this.frame)return console.log("No frame");this.frame.src=createEmbedURL(s,t),this.controller=new SC.Widget(this.frame)}this.ready=!1,this.waitForReady().then(()=>{console.log("scload: waitForReady returned!")})}async seekAndPlay(e,s){console.log("scseekandplay: waiting"),await this.waitForReady(),this.seekers.clear();let t=Symbol("SEEKER");this.seekers.add(t),this.controller.unbind(SC.Widget.Events.PLAY_PROGRESS),this.controller.setVolume(0),this.controller.seekTo(e()),this.controller.play(),console.log("scseekandplay: preparing"),this.controller.bind(SC.Widget.Events.PLAY_PROGRESS,({loadedProgress:r})=>{if(!this.seekers.has(t))return;let l=e(),a=r*s;console.log(`scseekandplay: loading... c: ${l}, l: ${a} (${r}, ${s})`),a>l&&(console.log("scseekandplay: loaded enough"),this.seekers.delete(t),this.controller.seekTo(l),this.controller.setVolume(100),this.controller.unbind(SC.Widget.Events.PLAY_PROGRESS))})}async resume(){await this.waitForReady(),console.log("scresume: checking seekers"),this.seekers.size||(console.log("scresume: calling play"),this.controller.play())}async pause(){await this.waitForReady(),this.seekers.clear(),this.controller.pause()}async stop(){await this.pause()}}export{SoundCloudWrapper};
